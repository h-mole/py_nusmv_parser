
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN ASSIGNMENT_SYMBOL BOOLEAN CASE COLON COMMA DOT DOTDOT EQUALS ESAC FALSE IDENTIFIER INIT_LOWERCASE INTEGER_NUMBER LBRACE LBRACKET LPAREN MODULE NEXT_LOWERCASE OR PLUS RBRACE RBRACKET RPAREN SELF SEMICOLON TRUE VAR XOR\n    module : MODULE identifier module_body\n    \n    module_body : module_element\n        | module_body module_element\n    \n    module_element : var_declaration\n        | assign_constraint\n    \n    assign_constraint : ASSIGN assign_list\n    \n    assign_list : assign SEMICOLON\n        | assign_list assign SEMICOLON\n    \n    assign : complex_identifier ASSIGNMENT_SYMBOL simple_expr\n        | INIT_LOWERCASE LPAREN complex_identifier RPAREN ASSIGNMENT_SYMBOL simple_expr\n        | NEXT_LOWERCASE LPAREN complex_identifier RPAREN ASSIGNMENT_SYMBOL next_expr\n    \n    var_declaration : VAR var_list\n    \n    var_list : identifier COLON type_specifier SEMICOLON\n        | var_list identifier COLON type_specifier SEMICOLON\n    \n    type_specifier : simple_type_specifier\n        | module_type_specifier\n    \n    simple_type_specifier : BOOLEAN\n        | LBRACE enumeration_type_body RBRACE\n    \n    enumeration_type_body : enumeration_type_value\n        | enumeration_type_body COMMA enumeration_type_value\n    \n    enumeration_type_value : symbolic_constant\n        | integer_constant\n    \n    module_type_specifier : identifier LPAREN parameter_list RPAREN\n    \n    parameter_list : simple_expr\n        | parameter_list COMMA simple_expr\n    \n    next_expr : basic_expr\n    \n    simple_expr : basic_expr\n    \n    basic_expr : case_expr\n        | LBRACE set_body_expr RBRACE\n        | binop_level_6\n    \n    binop_level_6 : binop_level_5\n        | binop_level_5 AND binop_level_6\n        | binop_level_5 OR binop_level_6\n        | binop_level_5 XOR binop_level_6\n    \n    binop_level_5 : bin_op_lv4\n        | bin_op_lv4 EQUALS binop_level_5\n    \n    bin_op_lv4 : sub_basic_expr PLUS bin_op_lv4\n        | sub_basic_expr\n    \n    sub_basic_expr :  LPAREN basic_expr RPAREN\n        | constant\n        | variable_identifier\n        | define_identifier\n    \n    case_expr : CASE case_body ESAC\n    \n    case_body : basic_expr COLON basic_expr SEMICOLON\n        | case_body basic_expr COLON basic_expr SEMICOLON\n    \n    set_body_expr : basic_expr\n        | set_body_expr COMMA basic_expr\n    \n    constant : boolean_constant\n        | integer_constant\n        | symbolic_constant\n        | range_constant\n    \n    complex_identifier : IDENTIFIER\n        | complex_identifier DOT IDENTIFIER\n        | complex_identifier LBRACKET simple_expr RBRACKET\n        | SELF\n    \n    variable_identifier : complex_identifier\n    \n    identifier : IDENTIFIER\n    \n    define_identifier : complex_identifier\n    \n    symbolic_constant : IDENTIFIER\n    \n    integer_constant : INTEGER_NUMBER\n    \n    boolean_constant : TRUE\n                     | FALSE\n    \n    range_constant : INTEGER_NUMBER DOTDOT INTEGER_NUMBER\n    '
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,6,7,8,11,12,14,24,37,66,87,],[0,-1,-2,-4,-5,-3,-12,-6,-7,-8,-13,-14,]),'IDENTIFIER':([2,9,10,12,14,22,24,25,26,27,28,29,30,36,37,42,44,48,65,66,75,77,78,79,80,81,87,91,93,96,104,105,107,110,117,118,],[4,4,19,4,19,4,-7,59,60,59,19,19,4,71,-8,59,59,59,59,-13,59,59,59,59,59,59,-14,71,59,59,59,59,59,59,-44,-45,]),'VAR':([3,4,5,6,7,8,11,12,14,24,37,66,87,],[9,-57,9,-2,-4,-5,-3,-12,-6,-7,-8,-13,-14,]),'ASSIGN':([3,4,5,6,7,8,11,12,14,24,37,66,87,],[10,-57,10,-2,-4,-5,-3,-12,-6,-7,-8,-13,-14,]),'COLON':([4,13,20,21,38,41,43,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,76,84,92,94,95,97,98,99,100,101,102,103,],[-57,22,-55,30,-56,-28,-30,-31,-35,-38,-40,-41,-42,-48,-49,-50,-51,-61,-62,-60,-52,-53,96,-54,-29,-43,110,-32,-33,-34,-36,-37,-39,-63,]),'LPAREN':([4,17,18,25,27,31,42,44,48,65,75,77,78,79,80,81,93,96,104,105,107,110,117,118,],[-57,28,29,48,48,65,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-44,-45,]),'INIT_LOWERCASE':([10,14,24,37,],[17,17,-7,-8,]),'NEXT_LOWERCASE':([10,14,24,37,],[18,18,-7,-8,]),'SELF':([10,14,24,25,27,28,29,37,42,44,48,65,75,77,78,79,80,81,93,96,104,105,107,110,117,118,],[20,20,-7,20,20,20,20,-8,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-44,-45,]),'SEMICOLON':([15,20,23,32,33,34,35,38,39,40,41,43,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,64,84,90,92,94,97,98,99,100,101,102,103,106,111,112,113,114,116,],[24,-55,37,66,-15,-16,-17,-56,-9,-27,-28,-30,-31,-35,-38,-40,-41,-42,-48,-49,-50,-51,-61,-62,-60,-52,-53,87,-54,-18,-29,-43,-32,-33,-34,-36,-37,-39,-63,-23,117,-10,-11,-26,118,]),'ASSIGNMENT_SYMBOL':([16,19,20,60,84,85,86,],[25,-52,-55,-53,-54,104,105,]),'DOT':([16,19,20,38,59,60,62,63,84,],[26,-52,-55,26,-52,-53,26,26,-54,]),'LBRACKET':([16,19,20,38,59,60,62,63,84,],[27,-52,-55,27,-52,-53,27,27,-54,]),'RPAREN':([19,20,38,40,41,43,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,62,63,82,84,88,89,92,94,97,98,99,100,101,102,103,115,],[-52,-55,-56,-27,-28,-30,-31,-35,-38,-40,-41,-42,-48,-49,-50,-51,-61,-62,-60,-52,-53,85,86,102,-54,106,-24,-29,-43,-32,-33,-34,-36,-37,-39,-63,-25,]),'PLUS':([20,38,47,49,50,51,52,53,54,55,56,57,58,59,60,84,102,103,],[-55,-56,81,-40,-41,-42,-48,-49,-50,-51,-61,-62,-60,-52,-53,-54,-39,-63,]),'EQUALS':([20,38,46,47,49,50,51,52,53,54,55,56,57,58,59,60,84,101,102,103,],[-55,-56,80,-38,-40,-41,-42,-48,-49,-50,-51,-61,-62,-60,-52,-53,-54,-37,-39,-63,]),'AND':([20,38,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,84,100,101,102,103,],[-55,-56,77,-35,-38,-40,-41,-42,-48,-49,-50,-51,-61,-62,-60,-52,-53,-54,-36,-37,-39,-63,]),'OR':([20,38,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,84,100,101,102,103,],[-55,-56,78,-35,-38,-40,-41,-42,-48,-49,-50,-51,-61,-62,-60,-52,-53,-54,-36,-37,-39,-63,]),'XOR':([20,38,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,84,100,101,102,103,],[-55,-56,79,-35,-38,-40,-41,-42,-48,-49,-50,-51,-61,-62,-60,-52,-53,-54,-36,-37,-39,-63,]),'RBRACKET':([20,38,40,41,43,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,84,92,94,97,98,99,100,101,102,103,],[-55,-56,-27,-28,-30,-31,-35,-38,-40,-41,-42,-48,-49,-50,-51,-61,-62,-60,-52,-53,84,-54,-29,-43,-32,-33,-34,-36,-37,-39,-63,]),'RBRACE':([20,38,41,43,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,84,92,94,97,98,99,100,101,102,103,108,109,],[-55,-56,-28,-30,-31,-35,-38,-40,-41,-42,-48,-49,-50,-51,-61,-62,-60,-52,-53,90,-19,-21,-22,-59,-60,92,-46,-54,-29,-43,-32,-33,-34,-36,-37,-39,-63,-20,-47,]),'COMMA':([20,38,40,41,43,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,84,88,89,92,94,97,98,99,100,101,102,103,108,109,115,],[-55,-56,-27,-28,-30,-31,-35,-38,-40,-41,-42,-48,-49,-50,-51,-61,-62,-60,-52,-53,91,-19,-21,-22,-59,-60,93,-46,-54,107,-24,-29,-43,-32,-33,-34,-36,-37,-39,-63,-20,-47,-25,]),'BOOLEAN':([22,30,],[35,35,]),'LBRACE':([22,25,27,30,42,44,48,65,75,93,96,104,105,107,110,117,118,],[36,42,42,36,42,42,42,42,42,42,42,42,42,42,42,-44,-45,]),'CASE':([25,27,42,44,48,65,75,93,96,104,105,107,110,117,118,],[44,44,44,44,44,44,44,44,44,44,44,44,44,-44,-45,]),'TRUE':([25,27,42,44,48,65,75,77,78,79,80,81,93,96,104,105,107,110,117,118,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-44,-45,]),'FALSE':([25,27,42,44,48,65,75,77,78,79,80,81,93,96,104,105,107,110,117,118,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-44,-45,]),'INTEGER_NUMBER':([25,27,36,42,44,48,65,75,77,78,79,80,81,83,91,93,96,104,105,107,110,117,118,],[58,58,72,58,58,58,58,58,58,58,58,58,58,103,72,58,58,58,58,58,58,-44,-45,]),'DOTDOT':([58,],[83,]),'ESAC':([75,117,118,],[94,-44,-45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module':([0,],[1,]),'identifier':([2,9,12,22,30,],[3,13,21,31,31,]),'module_body':([3,],[5,]),'module_element':([3,5,],[6,11,]),'var_declaration':([3,5,],[7,7,]),'assign_constraint':([3,5,],[8,8,]),'var_list':([9,],[12,]),'assign_list':([10,],[14,]),'assign':([10,14,],[15,23,]),'complex_identifier':([10,14,25,27,28,29,42,44,48,65,75,77,78,79,80,81,93,96,104,105,107,110,],[16,16,38,38,62,63,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'type_specifier':([22,30,],[32,64,]),'simple_type_specifier':([22,30,],[33,33,]),'module_type_specifier':([22,30,],[34,34,]),'simple_expr':([25,27,65,104,107,],[39,61,89,112,115,]),'basic_expr':([25,27,42,44,48,65,75,93,96,104,105,107,110,],[40,40,74,76,82,40,95,109,111,40,114,40,116,]),'case_expr':([25,27,42,44,48,65,75,93,96,104,105,107,110,],[41,41,41,41,41,41,41,41,41,41,41,41,41,]),'binop_level_6':([25,27,42,44,48,65,75,77,78,79,93,96,104,105,107,110,],[43,43,43,43,43,43,43,97,98,99,43,43,43,43,43,43,]),'binop_level_5':([25,27,42,44,48,65,75,77,78,79,80,93,96,104,105,107,110,],[45,45,45,45,45,45,45,45,45,45,100,45,45,45,45,45,45,]),'bin_op_lv4':([25,27,42,44,48,65,75,77,78,79,80,81,93,96,104,105,107,110,],[46,46,46,46,46,46,46,46,46,46,46,101,46,46,46,46,46,46,]),'sub_basic_expr':([25,27,42,44,48,65,75,77,78,79,80,81,93,96,104,105,107,110,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'constant':([25,27,42,44,48,65,75,77,78,79,80,81,93,96,104,105,107,110,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'variable_identifier':([25,27,42,44,48,65,75,77,78,79,80,81,93,96,104,105,107,110,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'define_identifier':([25,27,42,44,48,65,75,77,78,79,80,81,93,96,104,105,107,110,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'boolean_constant':([25,27,42,44,48,65,75,77,78,79,80,81,93,96,104,105,107,110,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'integer_constant':([25,27,36,42,44,48,65,75,77,78,79,80,81,91,93,96,104,105,107,110,],[53,53,70,53,53,53,53,53,53,53,53,53,53,70,53,53,53,53,53,53,]),'symbolic_constant':([25,27,36,42,44,48,65,75,77,78,79,80,81,91,93,96,104,105,107,110,],[54,54,69,54,54,54,54,54,54,54,54,54,54,69,54,54,54,54,54,54,]),'range_constant':([25,27,42,44,48,65,75,77,78,79,80,81,93,96,104,105,107,110,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'enumeration_type_body':([36,],[67,]),'enumeration_type_value':([36,91,],[68,108,]),'set_body_expr':([42,],[73,]),'case_body':([44,],[75,]),'parameter_list':([65,],[88,]),'next_expr':([105,],[113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> MODULE identifier module_body','module',3,'p_module','parser.py',34),
  ('module_body -> module_element','module_body',1,'p_module_body','parser.py',45),
  ('module_body -> module_body module_element','module_body',2,'p_module_body','parser.py',46),
  ('module_element -> var_declaration','module_element',1,'p_module_element','parser.py',71),
  ('module_element -> assign_constraint','module_element',1,'p_module_element','parser.py',72),
  ('assign_constraint -> ASSIGN assign_list','assign_constraint',2,'p_assign_constraint','parser.py',80),
  ('assign_list -> assign SEMICOLON','assign_list',2,'p_assign_list','parser.py',91),
  ('assign_list -> assign_list assign SEMICOLON','assign_list',3,'p_assign_list','parser.py',92),
  ('assign -> complex_identifier ASSIGNMENT_SYMBOL simple_expr','assign',3,'p_assign','parser.py',107),
  ('assign -> INIT_LOWERCASE LPAREN complex_identifier RPAREN ASSIGNMENT_SYMBOL simple_expr','assign',6,'p_assign','parser.py',108),
  ('assign -> NEXT_LOWERCASE LPAREN complex_identifier RPAREN ASSIGNMENT_SYMBOL next_expr','assign',6,'p_assign','parser.py',109),
  ('var_declaration -> VAR var_list','var_declaration',2,'p_var_declaration','parser.py',128),
  ('var_list -> identifier COLON type_specifier SEMICOLON','var_list',4,'p_var_list','parser.py',135),
  ('var_list -> var_list identifier COLON type_specifier SEMICOLON','var_list',5,'p_var_list','parser.py',136),
  ('type_specifier -> simple_type_specifier','type_specifier',1,'p_type_specifier','parser.py',150),
  ('type_specifier -> module_type_specifier','type_specifier',1,'p_type_specifier','parser.py',151),
  ('simple_type_specifier -> BOOLEAN','simple_type_specifier',1,'p_simple_type_specifier','parser.py',166),
  ('simple_type_specifier -> LBRACE enumeration_type_body RBRACE','simple_type_specifier',3,'p_simple_type_specifier','parser.py',167),
  ('enumeration_type_body -> enumeration_type_value','enumeration_type_body',1,'p_enumeration_type_body','parser.py',182),
  ('enumeration_type_body -> enumeration_type_body COMMA enumeration_type_value','enumeration_type_body',3,'p_enumeration_type_body','parser.py',183),
  ('enumeration_type_value -> symbolic_constant','enumeration_type_value',1,'p_enumeration_type_value','parser.py',195),
  ('enumeration_type_value -> integer_constant','enumeration_type_value',1,'p_enumeration_type_value','parser.py',196),
  ('module_type_specifier -> identifier LPAREN parameter_list RPAREN','module_type_specifier',4,'p_module_type_specifier','parser.py',206),
  ('parameter_list -> simple_expr','parameter_list',1,'p_parameter_list','parser.py',218),
  ('parameter_list -> parameter_list COMMA simple_expr','parameter_list',3,'p_parameter_list','parser.py',219),
  ('next_expr -> basic_expr','next_expr',1,'p_next_expr','parser.py',227),
  ('simple_expr -> basic_expr','simple_expr',1,'p_simple_expr','parser.py',234),
  ('basic_expr -> case_expr','basic_expr',1,'p_basic_expr','parser.py',291),
  ('basic_expr -> LBRACE set_body_expr RBRACE','basic_expr',3,'p_basic_expr','parser.py',292),
  ('basic_expr -> binop_level_6','basic_expr',1,'p_basic_expr','parser.py',293),
  ('binop_level_6 -> binop_level_5','binop_level_6',1,'p_binop_level_6','parser.py',309),
  ('binop_level_6 -> binop_level_5 AND binop_level_6','binop_level_6',3,'p_binop_level_6','parser.py',310),
  ('binop_level_6 -> binop_level_5 OR binop_level_6','binop_level_6',3,'p_binop_level_6','parser.py',311),
  ('binop_level_6 -> binop_level_5 XOR binop_level_6','binop_level_6',3,'p_binop_level_6','parser.py',312),
  ('binop_level_5 -> bin_op_lv4','binop_level_5',1,'p_binop_level_5','parser.py',327),
  ('binop_level_5 -> bin_op_lv4 EQUALS binop_level_5','binop_level_5',3,'p_binop_level_5','parser.py',328),
  ('bin_op_lv4 -> sub_basic_expr PLUS bin_op_lv4','bin_op_lv4',3,'p_binop_level_4','parser.py',340),
  ('bin_op_lv4 -> sub_basic_expr','bin_op_lv4',1,'p_binop_level_4','parser.py',341),
  ('sub_basic_expr -> LPAREN basic_expr RPAREN','sub_basic_expr',3,'p_sub_basic_expr','parser.py',354),
  ('sub_basic_expr -> constant','sub_basic_expr',1,'p_sub_basic_expr','parser.py',355),
  ('sub_basic_expr -> variable_identifier','sub_basic_expr',1,'p_sub_basic_expr','parser.py',356),
  ('sub_basic_expr -> define_identifier','sub_basic_expr',1,'p_sub_basic_expr','parser.py',357),
  ('case_expr -> CASE case_body ESAC','case_expr',3,'p_case_expr','parser.py',370),
  ('case_body -> basic_expr COLON basic_expr SEMICOLON','case_body',4,'p_case_body','parser.py',379),
  ('case_body -> case_body basic_expr COLON basic_expr SEMICOLON','case_body',5,'p_case_body','parser.py',380),
  ('set_body_expr -> basic_expr','set_body_expr',1,'p_set_body_expr','parser.py',395),
  ('set_body_expr -> set_body_expr COMMA basic_expr','set_body_expr',3,'p_set_body_expr','parser.py',396),
  ('constant -> boolean_constant','constant',1,'p_constant','parser.py',408),
  ('constant -> integer_constant','constant',1,'p_constant','parser.py',409),
  ('constant -> symbolic_constant','constant',1,'p_constant','parser.py',410),
  ('constant -> range_constant','constant',1,'p_constant','parser.py',411),
  ('complex_identifier -> IDENTIFIER','complex_identifier',1,'p_complex_identifier','parser.py',420),
  ('complex_identifier -> complex_identifier DOT IDENTIFIER','complex_identifier',3,'p_complex_identifier','parser.py',421),
  ('complex_identifier -> complex_identifier LBRACKET simple_expr RBRACKET','complex_identifier',4,'p_complex_identifier','parser.py',422),
  ('complex_identifier -> SELF','complex_identifier',1,'p_complex_identifier','parser.py',423),
  ('variable_identifier -> complex_identifier','variable_identifier',1,'p_variable_identifier','parser.py',441),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','parser.py',448),
  ('define_identifier -> complex_identifier','define_identifier',1,'p_define_identifier','parser.py',455),
  ('symbolic_constant -> IDENTIFIER','symbolic_constant',1,'p_symbolic_constant','parser.py',465),
  ('integer_constant -> INTEGER_NUMBER','integer_constant',1,'p_integer_constant','parser.py',472),
  ('boolean_constant -> TRUE','boolean_constant',1,'p_boolean_constant','parser.py',479),
  ('boolean_constant -> FALSE','boolean_constant',1,'p_boolean_constant','parser.py',480),
  ('range_constant -> INTEGER_NUMBER DOTDOT INTEGER_NUMBER','range_constant',3,'p_range_constant','parser.py',487),
]
